fbb._map = function(){
    var self = this;
    self.map = {};
    fbb.lat = fbb.defaultLat;
    fbb.lng = fbb.defaultLng;
    var mapEl;
    var $_addressInput;
    var icon_path = "<%= image_path 'icon/ball_pointer.png' %>";
    self.mapOptions = {}
    self.mapObj = {};


    var initialize = function(){
        google.maps.event.addDomListener(window, 'load', function(){
            checkForMap();
            checkForSearchResults();
            showCourtDOM();
            courtSearchGeoComplete( $("#courtAddress"));
            findHoopsGeoComplete( $("#location_search") );
        });
    };


    var checkForSearchResults = function(){
        if ($("#find_hoops_canvas").length){
            populateDistancesAndMarkers();
            Arbiter.subscribe("searchLocation:fetched", function(searchLocation){
                if(searchLocation){
                    $("#thisLocation").text(searchLocation);
                }
                if(fbb.map.zoom > 15){
                    fbb.map.setZoom(15);
                }
            });
            reverseGeoCode(gon.lat, gon.lng, "searchLocation:fetched");
        }
    };

    var reverseGeoCode = function(_lat, _lng, _event){
        var _latLng = new google.maps.LatLng(parseFloat(_lat), parseFloat(_lng));
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({'latLng': _latLng}, function(results, status){
            console.log("reverse geocoding");
            console.log(status);
            if(results.length){
                var _address = results[1].formatted_address;
                Arbiter.publish(_event, _address);
            }
        });
    };

    var populateDistancesAndMarkers = function(){
        var _markers= [];
        $(".result").each(function(i, _this){
            //this works on find_events as well
            var result_el = $(this);
            var distance_el = result_el.find('.result_distance');
            var court_el = result_el.find('.result_location');
            var event_el = result_el.find('.event_result_join');
            var lat = parseFloat( result_el.find('.courtLat').val() );
            var lng = parseFloat( result_el.find('.courtLng').val() );
            var latLng = new google.maps.LatLng(lat,lng);
            var _marker = new google.maps.Marker({
                icon: icon_path,
                position: latLng,
                map: fbb.map,
                animation: google.maps.Animation.DROP
            });

            _marker.addListener('click', function(){
                if(court_el.length){
                    console.log("there is a court el");
                    console.log(court_el);
                    var _url = court_el.attr("href");
                    window.location = _url;
                } else {
                    if(event_el.length){
                        var _url = event_el.attr("href");
                        window.location = _url;
                    }
                }
            });

            _marker.addListener('mouseover', function(){
                result_el.addClass('highlight');
            });

            _marker.addListener('mouseout', function(){
                result_el.removeClass('highlight');
            });


            getDistance(gon.lat, gon.lng, lat, lng, distance_el);
            var _quick_distance = quick_distance(gon.lat, gon.lng, lat, lng);
            if(_quick_distance < fbb.lotsOfDistance){
                //don't include other countries, basically.
                _markers.push(_marker);
            }
        });

        if(_markers.length){
            var _bounds = new google.maps.LatLngBounds();
            for(var i=0; i<_markers.length; i++) {
                _bounds.extend(_markers[i].getPosition());
            }
            fbb.map.fitBounds(_bounds);
        }
    };

    var debugLatLng = function(_lat, _lng){ //DEBUG
        var _latLng = new google.maps.LatLng(parseFloat(_lat), parseFloat(_lng));
        var geocoder = new google.maps.Geocoder();
        console.log("wtf");
        console.log(_latLng);
        geocoder.geocode({'latLng': _latLng}, function(results, status){
            console.log(results);
            console.log(results[0].formatted_address);
        });
    }


    var checkForMap = function(){
        var mapEl = $(".mapEl");
        if(mapEl.length){
            mapEl = $(".mapEl")[0];
            var whichMap = $(".mapEl").attr("id");
            var mapOptions;
            setupOptions();
            fbb.map = new google.maps.Map(mapEl, self.courtMapOptions);
            switch(whichMap){
                case "court_map":
                    getDistance(fbb.defaultLat, fbb.defaultLng, self.mapObj.lat, self.mapObj.lng, $("#milesAway"));
                    setupCourtCursor();
                    break;
                case "add_court_map":
                case "edit_court_map":
                    addDoubleClickListener();
                    // setupCourtCursor();
                    // addCourtDOM();
                    break;
                case "add_event_map":
                    setupCourtCursor();
                    addCourtDOM();
                break;
            }

        }
    };

    fbb.checkForMap = checkForMap;

    var addDoubleClickListener = function(){
        google.maps.event.addListener(fbb.map, "dblclick", function(e){
            var latLng = e.latLng;
            window.LAT = latLng;
            fbb.marker.setPosition(latLng);
            fbb.map.panTo(latLng);
            self.geocoder = self.geocoder || new google.maps.Geocoder();
            self.geocoder.geocode({'latLng':latLng}, function(results, status){
                self.address = results[0].formatted_address;
                populateDom(self.address, latLng.lat(), latLng.lng());
                $(".edit_court").submit();
            });
        });
    };


    var getLatLng = function(){
        self.mapObj = self.mapObj || {};
        if(typeof gon !== "undefined"){
            if (gon.lat && gon.lng){
                self.mapObj.lat = parseFloat( gon.lat );
                self.mapObj.lng = parseFloat( gon.lng );
            }
        } else {
            console.log("gon is not loaded");
        }

    };



    var simpleMap = function(){
        //to test that the map is working
        fbb.map = new google.maps.Map(mapEl, self.mapOptions);
    };

    var setupOptions = function(){
        getLatLng();
        self.courtMapOptions = {
            center: new google.maps.LatLng(self.mapObj.lat, self.mapObj.lng),
            zoom: 15,
            disableDoubleClickZoom: true,
            scrollwheel: false,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
        };
    };

    var prepareCourtMap = function(mapEl){
        fbb.map = new google.maps.Map(mapEl, self.courtMapOptions);
        setupCourtCursor();
        addCourtDOM();
        //TODO - get members lat and lng, then result to thing
        getDistance(fbb.defaultLat, fbb.defaultLng, self.mapObj.lat, self.mapObj.lng, $("#milesAway"));
    };

    var getDistance = function(lat1, lng1, lat2, lng2, result_el){
        var service = new google.maps.DistanceMatrixService();
        var origin = new google.maps.LatLng(parseFloat(lat1), parseFloat(lng1));
        var destination = new google.maps.LatLng(parseFloat(lat2), parseFloat(lng2));
        var foundDistanceHandler = function(response, status){
            if( status != google.maps.DistanceMatrixStatus.OK){
                console.log("Error was: " + status);
            } else {
                var data = response.rows[0].elements[0];
                if(data.status === "OK"){
                    distance = populateDistance( data.distance.value, result_el );
                } else {
                    result_el.text("Very Far");
                }
            }
        };

        var populateDistance = function( distance, result_el ){
            var milesAway = parseFloat( parseFloat( toMiles( distance ) ).toFixed(1));
            var milesAwayString = "mile".pluralize(milesAway);
            result_el.text(milesAway + " " + milesAwayString + " away");
            return milesAway;
        };


        service.getDistanceMatrix(
            {
                origins : [origin],
                destinations : [destination],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.METRIC,
                avoidHighways: false,
                avoidTolls: false
            }, foundDistanceHandler
        );
    };


    var toMiles = function(meters){
        return meters *= 0.000621371192;
    }

    var clearMarkers = function(){
        if(fbb.marker){
            fbb.marker.setMap(null);
            fbb.marker = null;
        }
    }

    var setupCourtCursor = function(){
        var latLng = self.mapOptions.center || new google.maps.LatLng(gon.lat, gon.lng);
        fbb.marker = new google.maps.Marker({
            icon: icon_path,
            position: latLng,
            map: self.map
        });
    };

    var setupDraggableMapCursor = function(_point){
        fbb.marker = new google.maps.Marker({
            icon: icon_path,
            draggable: true,
            position: _point,
            map: self.map
        });
        return fbb.marker;
    }

    var courtSearchGeoComplete = function(_input){
        $_addressInput = $("#address_search");
        if( $_addressInput.length ){
            $_addressInput.geocomplete({
                map: fbb.map,
                types: ['establishment'],
                location: new google.maps.LatLng(self.mapObj.lat, self.mapObj.lng),
                mapOptions: fbb.courtMapOptions,
                markerOptions: {
                    draggable: true,
                    icon: icon_path,
                    animation: google.maps.Animation.DROP,
                }
            })
            .bind("geocode:result", courtSearchSuccessHandler)
            .bind("geocode:dragged", courtSearchDraggedHandler)
            .bind("geocode:error", function(event, result){
                console.log(event);
                console.log(result);
            });
            fbb.marker = $_addressInput.geocomplete("marker");
        }

    };


    var autoComplete = function(){
        console.log("setting up autoComplete");
        var service = new google.maps.places.AutocompleteService();
        if( $("#address_search").length ){
            $("#address_search").typeahead({
                source: function(query, process){
                    console.log("source");
                    service.getPlacePredictions({
                        input: query,
                        types: ['establishment'],
                    }, function(predictions, status) {
                        if (status == google.maps.places.PlacesServiceStatus.OK) {
                            process($.map(predictions, function(prediction) {
                                $("#addressNotFound").fadeOut();
                                return prediction.description;
                            }));
                        } else {
                            $("#addressNotFound").fadeIn();
                        }
                    });
                },
                updater: function(_address){
                    console.log("looking up addressss");
                    return lookUpAutoCompleteAddress(_address);
                }
            });
        }
    };


    var lookUpAutoCompleteAddress = function(_address){
        self.geocoder = self.geocoder || new google.maps.Geocoder();
        self.address = _address;
        self.geocoder.geocode({ address: _address}, displayAutoCompleteResults);
    };

    var displayAutoCompleteResults = function(results, status){
        if( status != google.maps.GeocoderStatus.OK ){
            return autoCompleteFailureHandler(results, status);
        } else {
            return autoCompleteSuccessHandler(results, status);
        }
    };

    var courtSearchDraggedHandler = function(event, result){
        var lat = parseFloat(result.lat());
        var lng = parseFloat(result.lng());
        var latlng = new google.maps.LatLng(lat, lng);
        self.geocoder = self.geocoder || new google.maps.Geocoder();
        self.geocoder.geocode({'latLng':latlng}, function(results, status){
            if(status == google.maps.GeocoderStatus.OK){
                if (results[0]){
                    self.address = results[0].formatted_address;
                    populateDom(self.address, lat, lng);
                    $(".edit_court").submit();
                }
            }
        });
    };


    var courtSearchSuccessHandler = function(event, result){
        //TODO - make a case by case function
       var _address = result.formatted_address;
       self.address = _address;
       var lat = result.geometry.location.lat();
       var lng = result.geometry.location.lng();
       populateDom(_address, lat, lng);
       $(".edit_court").submit();
    };

    var populateDom = function(_address, lat, lng){
        populateLatLng(lat, lng);
        populateLocation( _address );
        $_addressInput.val(_address);
        $(".address_search_container").hide();
        $(".map_results_container").show();
        $("#addressNotFound").hide();
        $("#address_search_result").html(self.address + "<br><i class='orange'>Double-click map or drag basketball for better court placement</i>");
    }

    var populateLatLng = function(lat, lng){
        $("#court_lat").val(lat);
        $("#court_lng").val(lng);
    }

    var populateLocation = function(location){
        $("#court_location").val(location);
    }


    var autoCompleteFailureHandler = function(results, status){
        $("#addressNotFound").fadeIn();
        var addressSearchEl = $("#address_search");
        addressSearchEl.val("");
        addressSearchEl.focus();
    };

    var addCourtDOM = function(){
        $("#searchAgain").click(function(e){
            e.preventDefault();
            clearMarkers();
            $(".address_search_container").show();
            $(".map_results_container").hide();
        });

        $("#submitMap").click(function(e){
            e.preventDefault();
            autoCompleteFailureHandler();
        });
    }

    var showCourtDOM = function(){
        var addressEl = $("#showCourtAddress");

    };

    var findHoopsGeoComplete = function(_input){
        var map = new google.maps.Map(document.getElementById("noMap"));
        if (_input.length){
            _input.geocomplete()
            .bind("geocode:result", findHoopsSuccessHandler)
            .bind("geocodeLerror", function(event, result){
                console.log(event);
                console.log(result);
            });
        }
    };

    var findHoopsSuccessHandler = function(event, result){
        var lat = result.geometry.location.lat();
        var lng = result.geometry.location.lng();
        if(lat && lng){
            var searchURL = $("#i_want_to").val();
            var _url = "/"+searchURL+"?lat=" + lat + "&lng=" + lng
            //var _url = "/find-hoops?by=" + result.formatted_address
            var _within = $("#within").val();
            if (_within){
                _url += "&within=" + _within;
            }
            window.location = _url;
        } else {
            console.log("Something went wrong with getting the lat & lng");
        }

    };

    function quick_distance(lat1, lon1, lat2, lon2){
        var R = 6378.137; // Radius of earth in KM
        var dLat = (lat2 - lat1) * Math.PI / 180;
        var dLon = (lon2 - lon1) * Math.PI / 180;
        var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
        Math.sin(dLon/2) * Math.sin(dLon/2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        var d = R * c;
        return d * 1000; // meters
    }

    initialize();

}


